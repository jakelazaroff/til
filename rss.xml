<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
<channel>
<title>jakelazaroff TIL</title>
<description>A collection of useful things I've learned.</description>
<link>https://github.com/jakelazaroff/til</link>
<item>
<guid>https://github.com/jakelazaroff/til/blob/main/github/run-github-actions-locally.md</guid>
<link>https://github.com/jakelazaroff/til/blob/main/github/run-github-actions-locally.md</link>
<title>TIL: Run GitHub Actions locally</title>
<pubDate>Wed, 27 Sep 2023 04:21:36 GMT</pubDate>
<content:encoded>&lt;p&gt;A common pain point with GitHub Actions is that the feedback loop is so long: make a change, push, wait for it to run, find an error, try to debug, repeat. Which is why I was so happy to discover &lt;a href=&quot;https://github.com/nektos/act&quot;&gt;&lt;code&gt;act&lt;/code&gt;&lt;/a&gt;, a tool for running GitHub Actions locally! The only prerequisite is Docker, which &lt;code&gt;act&lt;/code&gt; uses to pull the appropriate images to run your actions.&lt;/p&gt;
&lt;p&gt;By default, &lt;code&gt;act&lt;/code&gt; will run the action for the &lt;code&gt;push&lt;/code&gt; event, although you can configure it to run specific events or jobs:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# run the &#x60;push&#x60; event:
act

# run a specific event:
act pull_request

# run a specific job:
act -j test
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If your action needs a GitHub token (for example, if you&amp;#39;re checking out your code with &lt;a href=&quot;https://github.com/actions/checkout&quot;&gt;&lt;code&gt;actions/checkout&lt;/code&gt;&lt;/a&gt;) you can supply it with the &lt;code&gt;-s&lt;/code&gt; flag (for &amp;quot;secrets&amp;quot;) and the &lt;code&gt;GITHUB_TOKEN&lt;/code&gt; environment variable. This is easiest if you have the &lt;a href=&quot;https://cli.github.com/&quot;&gt;GitHub CLI&lt;/a&gt; installed:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;act -s GITHUB_TOKEN=&amp;quot;$(gh auth token)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that the &lt;a href=&quot;https://github.com/nektos/act#github_token&quot;&gt;official docs&lt;/a&gt; note that supplying your token in this way can leak it to the shell history.&lt;/p&gt;
</content:encoded>
</item>
<item>
<guid>https://github.com/jakelazaroff/til/blob/main/htmx/attach-attributes-to-dynamically-added-elements.md</guid>
<link>https://github.com/jakelazaroff/til/blob/main/htmx/attach-attributes-to-dynamically-added-elements.md</link>
<title>TIL: Attach attributes to dynamically added elements</title>
<pubDate>Mon, 25 Sep 2023 05:20:01 GMT</pubDate>
<content:encoded>&lt;p&gt;It&amp;#39;s barely mentioned within the HTMX documentation, but by default HTMX attributes only work on elements that were in the DOM when HTMX was loaded, or that HTMX itself added to the DOM. This means that if you add an element by some other means — say, AlpineJS — HTMX won&amp;#39;t know about any attributes on it or its descendants.&lt;/p&gt;
&lt;p&gt;In the below example with AlpineJS and HTMX, the toggle button can be clicked to show and hide the form — but the &lt;a href=&quot;https://htmx.org/attributes/hx-boost/&quot;&gt;&lt;code&gt;hx-boost&lt;/code&gt; attribute&lt;/a&gt; won&amp;#39;t be detected, which means that it will be a normal form submission:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div x-data=&amp;quot;{ show: false }&amp;quot;&amp;gt;
  &amp;lt;template x-if=&amp;quot;show&amp;quot;&amp;gt;
    &amp;lt;form method=&amp;quot;post&amp;quot; action=&amp;quot;/some/endpoint&amp;quot; hx-boost=&amp;quot;true&amp;quot;&amp;gt;
      &amp;lt;input name=&amp;quot;firstname&amp;quot; /&amp;gt;
      &amp;lt;input name=&amp;quot;lastname&amp;quot; /&amp;gt;
      &amp;lt;button&amp;gt;Submit&amp;lt;/button&amp;gt;
    &amp;lt;/form&amp;gt;
  &amp;lt;/template&amp;gt;
  &amp;lt;button @click=&amp;quot;show = !show&amp;quot;&amp;gt;Toggle&amp;lt;/button&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;HTMX provides a function &lt;a href=&quot;https://htmx.org/api/#process&quot;&gt;&lt;code&gt;htmx.process&lt;/code&gt;&lt;/a&gt; that checks a given element for HTMX attributes. Call it like so:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;htmx.process(document.body);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above code snippet can be fixed with the &lt;a href=&quot;https://htmx.org/attributes/hx-boost/&quot;&gt;AlpineJS &lt;code&gt;x-effect&lt;/code&gt; directive&lt;/a&gt;, which runs an expression when the tag is added to the DOM:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div x-data=&amp;quot;{ show: false }&amp;quot;&amp;gt;
  &amp;lt;template x-if=&amp;quot;show&amp;quot;&amp;gt;
    &amp;lt;form x-effect=&amp;quot;htmx.process($el)&amp;quot; method=&amp;quot;post&amp;quot; action=&amp;quot;/some/endpoint&amp;quot; hx-boost=&amp;quot;true&amp;quot;&amp;gt;
      &amp;lt;input name=&amp;quot;firstname&amp;quot; /&amp;gt;
      &amp;lt;input name=&amp;quot;lastname&amp;quot; /&amp;gt;
      &amp;lt;button&amp;gt;Submit&amp;lt;/button&amp;gt;
    &amp;lt;/form&amp;gt;
  &amp;lt;/template&amp;gt;
  &amp;lt;button @click=&amp;quot;show = !show&amp;quot;&amp;gt;Toggle&amp;lt;/button&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</content:encoded>
</item>
<item>
<guid>https://github.com/jakelazaroff/til/blob/main/typescript/type-concrete-subclasses-of-an-abstract-class.md</guid>
<link>https://github.com/jakelazaroff/til/blob/main/typescript/type-concrete-subclasses-of-an-abstract-class.md</link>
<title>TIL: Type concrete subclasses of an abstract class</title>
<pubDate>Wed, 13 Sep 2023 19:01:29 GMT</pubDate>
<content:encoded>&lt;p&gt;Let&amp;#39;s say there&amp;#39;s an an inheritance hierarchy consisting of an abstract base class and two concrete subclasses:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;abstract class Base {
  constructor(exampleParam: number) {}
  abstract foo(): void;
}

class A extends Base {
  foo() {
    console.log(&amp;quot;A&amp;quot;);
  }
}

class B extends Base {
  foo() {
    console.log(&amp;quot;B&amp;quot;);
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In an inheritance hierarchy, it&amp;#39;s common to reference a group of subclasses by their base class (the &lt;a href=&quot;https://en.wikipedia.org/wiki/Liskov_substitution_principle&quot;&gt;Liskov substitution principle&lt;/a&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;function doSomething(obj: Base) {
  base.foo();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;One situation in which this gets thorny for abstract classes is where a subclass that won&amp;#39;t be known until runtime must be instantiated. In this case, referring to the base class directly will result in errors about how TypeScript cannot create an instance of an abstract class:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;function instantiate(Class: typeof Base) {
  return new Class(10); // Cannot create an instance of an abstract class.
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Instead of using the abstract base class&amp;#39;s type directly, instead create an object type in which a constructor (a &lt;code&gt;new&lt;/code&gt; method) returns an instance of the abstract class. If the constructor takes any parameters, they can be extracted using the &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/utility-types.html#constructorparameterstype&quot;&gt;&lt;code&gt;ConstructorParameters&lt;/code&gt;&lt;/a&gt; utility type:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;function instantiate(Class: { new (...params: ConstructorParameters&amp;lt;typeof Base&amp;gt;): Base }) {
  return new Class(10);
}
&lt;/code&gt;&lt;/pre&gt;
</content:encoded>
</item>
<item>
<guid>https://github.com/jakelazaroff/til/blob/main/javascript/access-css-variables-from-javascript.md</guid>
<link>https://github.com/jakelazaroff/til/blob/main/javascript/access-css-variables-from-javascript.md</link>
<title>TIL: Access CSS variables from JavaScript</title>
<pubDate>Sat, 26 Aug 2023 17:33:14 GMT</pubDate>
<content:encoded>&lt;p&gt;In building &lt;a href=&quot;https://fxplayground.pages.dev/&quot;&gt;fxplayground&lt;/a&gt;, I wanted to use colors from the site&amp;#39;s theme in a canvas visualization. The theme colors were all stored in CSS custom properties (variables), but the visualization drawing code was all JavaScript. I needed a way to read the CSS color variables from within JavaScript code.&lt;/p&gt;
&lt;p&gt;Luckily, there&amp;#39;s a function called &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Window/getComputedStyle&quot;&gt;&lt;code&gt;getComputedStyle&lt;/code&gt;&lt;/a&gt; that can help with that:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const color = getComputedStyle(document.documentElement).getPropertyValue(&amp;quot;--color-primary&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;getComputedStyle&lt;/code&gt; takes a DOM node and returns a live &lt;code&gt;CSSStyleDeclaration&lt;/code&gt;, which contains all the styles applied to that element. Calling &lt;code&gt;getPropertyValue&lt;/code&gt; returns the value for a given property, which includes CSS variable declarations. So if there&amp;#39;s a variable defined on the &lt;code&gt;:root&lt;/code&gt; selector, you can get the value by calling &lt;code&gt;getPropertyValue(&amp;quot;--variable-name&amp;quot;)&lt;/code&gt;!&lt;/p&gt;
</content:encoded>
</item>
<item>
<guid>https://github.com/jakelazaroff/til/blob/main/javascript/load-a-user-created-javascript-file-in-the-browser.md</guid>
<link>https://github.com/jakelazaroff/til/blob/main/javascript/load-a-user-created-javascript-file-in-the-browser.md</link>
<title>TIL: Load a user-created JavaScript file in the browser</title>
<pubDate>Mon, 21 Aug 2023 18:55:09 GMT</pubDate>
<content:encoded>&lt;p&gt;I ran into this when building a &lt;a href=&quot;https://jakelazaroff.com/words/building-a-live-coding-audio-playground/&quot;&gt;live coding audio playground&lt;/a&gt;, and presumably it&amp;#39;s useful for other similar apps. The issue is that APIs like &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/AudioWorklet&quot;&gt;&lt;code&gt;AudioWorklet&lt;/code&gt;&lt;/a&gt; expect to be given a separate JavaScript file to run as a worker or worklet, but for apps in which the user writes code themselves there&amp;#39;s no easy way to serve that file (without running a webserver).&lt;/p&gt;
&lt;p&gt;The trick is to use a combination of a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/File&quot;&gt;&lt;code&gt;File&lt;/code&gt;&lt;/a&gt; (which represents raw data, plus some file-specific things like a name) and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/URL/createObjectURL_static&quot;&gt;&lt;code&gt;URL.createObjectURL&lt;/code&gt;&lt;/a&gt;, which lets you create &amp;quot;stub&amp;quot; URLs for &lt;code&gt;File&lt;/code&gt; objects.&lt;/p&gt;
&lt;p&gt;Here&amp;#39;s how to use the trick create a Web Worker:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// source code goes here
const src = &amp;quot;&amp;quot;;

// create a fake JS file from the source code
const file = new File([src], &amp;quot;file.js&amp;quot;);

// create a URL for the fake JS file
const url = URL.createObjectURL(file.slice(0, file.size, &amp;quot;application/javascript&amp;quot;));

// add the fake JS file as a Web Worker
const worker = new Worker(url);

// revoke the URL so as to not leak memory
URL.revokeObjectURL(url);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The call to &lt;code&gt;file.slice&lt;/code&gt; is there to fix a Safari bug where it can&amp;#39;t infer the MIME type.&lt;/p&gt;
</content:encoded>
</item>
<item>
<guid>https://github.com/jakelazaroff/til/blob/main/css/make-a-css-variable-color-translucent.md</guid>
<link>https://github.com/jakelazaroff/til/blob/main/css/make-a-css-variable-color-translucent.md</link>
<title>TIL: Make a CSS variable color translucent</title>
<pubDate>Tue, 15 Aug 2023 19:13:11 GMT</pubDate>
<content:encoded>&lt;p&gt;Given a color stored in a CSS variable, how do you change the opacity? This &lt;a href=&quot;https://stackoverflow.com/a/71098929&quot;&gt;Stack Overflow answer&lt;/a&gt; has a couple good suggestions.&lt;/p&gt;
&lt;p&gt;First is &lt;code&gt;color-mix&lt;/code&gt;, which is &lt;a href=&quot;https://caniuse.com/?search=color-mix&quot;&gt;widely supported in browsers today&lt;/a&gt;. It lets you mix two colors in a given color space. The trick is to mix some percentage of the color variable with the color &lt;code&gt;transparent&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.classname {
  color: color-mix(in srgb, var(--some-color) 50%, transparent);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next is relative color syntax, which &lt;a href=&quot;https://caniuse.com/css-relative-colors&quot;&gt;as of August 2023 is only supported in Safari&lt;/a&gt;. The keyword &lt;code&gt;from&lt;/code&gt; lets you convert colors between formats; you can then fill in the missing alpha value when passing it to &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/color_value&quot;&gt;a color function&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.classname {
  color: rgb(from var(--some-color) / 50%);
}
&lt;/code&gt;&lt;/pre&gt;
</content:encoded>
</item>
<item>
<guid>https://github.com/jakelazaroff/til/blob/main/css/use-css-variables-in-a-dialog-backdrop.md</guid>
<link>https://github.com/jakelazaroff/til/blob/main/css/use-css-variables-in-a-dialog-backdrop.md</link>
<title>TIL: Use CSS variables in a &#x60;&lt;dialog&gt;&#x60; backdrop</title>
<pubDate>Tue, 15 Aug 2023 18:43:02 GMT</pubDate>
<content:encoded>&lt;p&gt;I was building a native modal using the new(ish) &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dialog&quot;&gt;&lt;code&gt;&amp;lt;dialog&amp;gt;&lt;/code&gt; element&lt;/a&gt; when I realized that I couldn&amp;#39;t use CSS variables (officially called &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties&quot;&gt;custom properties&lt;/a&gt;) in the &lt;code&gt;::backdrop&lt;/code&gt; pseudo-element.&lt;/p&gt;
&lt;p&gt;I found &lt;a href=&quot;https://stackoverflow.com/questions/58818299/css-variables-not-working-in-dialogbackdrop&quot;&gt;this Stack Overflow post&lt;/a&gt; that links to a (now-removed) paragraph in the spec for the &lt;code&gt;::backdrop&lt;/code&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It does not inherit from any element and is not inherited from. No restrictions are made on what properties apply to this pseudo-element either.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Since variables propagate via inheritance, that means that the &lt;code&gt;::backdrop&lt;/code&gt; doesn&amp;#39;t have access to variables defined on the &lt;code&gt;:root&lt;/code&gt; selector.&lt;/p&gt;
&lt;p&gt;Fortunately, the fix is pretty simple: just define any variables that should be globally available on both the &lt;code&gt;:root&lt;/code&gt; and &lt;code&gt;::backdrop&lt;/code&gt; selectors.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;:root,
::backdrop {
  --some-variable-name: 10px;
  --some-other-variable-name: #f00;
  /* etc etc */
}
&lt;/code&gt;&lt;/pre&gt;
</content:encoded>
</item>
<item>
<guid>https://github.com/jakelazaroff/til/blob/main/svelte/bail-out-of-a-reactive-block.md</guid>
<link>https://github.com/jakelazaroff/til/blob/main/svelte/bail-out-of-a-reactive-block.md</link>
<title>TIL: Bail out of a reactive block</title>
<pubDate>Fri, 11 Aug 2023 06:11:00 GMT</pubDate>
<content:encoded>&lt;p&gt;In Svelte, you can &lt;a href=&quot;https://svelte.dev/docs/svelte-components#script-3-$-marks-a-statement-as-reactive&quot;&gt;prefix a block with &lt;code&gt;$:&lt;/code&gt; to mark it as reactive&lt;/a&gt;, which means it will re-run whenever any outside variables referenced within the block change. It performs the same function as &lt;a href=&quot;https://react.dev/reference/react/useEffect&quot;&gt;&lt;code&gt;useEffect&lt;/code&gt; in React&lt;/a&gt; or &lt;a href=&quot;https://www.solidjs.com/tutorial/introduction_effects&quot;&gt;&lt;code&gt;createEffect&lt;/code&gt; in Solid&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The difference is that with React and Solid, the &amp;quot;effect&amp;quot; is performed by a function, which means it&amp;#39;s possible to &amp;quot;bail out&amp;quot; by returning early. Here&amp;#39;s a contrived React example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;function ExampleComponent({ shouldRun }) {
  useEffect(() =&amp;gt; {
    if (!shouldRun) return;

    // effect code goes here
  }, [shouldRun]);

  // ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With Svelte, however, reactive blocks execute at the top level of the module, &lt;a href=&quot;http://es5.github.io/#x12.9&quot;&gt;where &lt;code&gt;return&lt;/code&gt; statements aren&amp;#39;t allowed&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;An ECMAScript program is considered syntactically incorrect if it contains a &lt;code&gt;return&lt;/code&gt; statement that is not within a &lt;code&gt;FunctionBody&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It doesn&amp;#39;t seem to be documented anywhere, but Svelte lets you add an &lt;code&gt;if&lt;/code&gt; statement before the reactive block in order to execute it conditionally. Variables referenced within the condition will also be tracked reactively, even if they&amp;#39;re not referenced within the block itself.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;script&amp;gt;
  export let shouldRun;

  $: if (shouldRun) {
    // effect code goes here
  }
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you have multiple conditions, or need to run some logic within the reactive block before bailing out, you can take advantage of the fact that &lt;code&gt;$:&lt;/code&gt; uses &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/label&quot;&gt;JS label syntax&lt;/a&gt;, and use the &lt;code&gt;break&lt;/code&gt; statement to bail out of the block:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;script&amp;gt;
  export let shouldRun;

  $: {
    if (!shouldRun) break $;

    let shouldContinueRunning;
    // logic to calculate &#x60;shouldContinueRunning&#x60; goes here
    if (!shouldContinueRunning) break $;

    // effect code goes here
  }
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</content:encoded>
</item>
<item>
<guid>https://github.com/jakelazaroff/til/blob/main/github/write-an-inline-script-in-a-github-actions-workflow.md</guid>
<link>https://github.com/jakelazaroff/til/blob/main/github/write-an-inline-script-in-a-github-actions-workflow.md</link>
<title>TIL: Write an inline script in a GitHub Actions workflow</title>
<pubDate>Thu, 03 Aug 2023 15:50:30 GMT</pubDate>
<content:encoded>&lt;p&gt;This is kind of meta because I&amp;#39;m mostly writing this TIL to test the workflow script of this repo, but anyway: the &lt;a href=&quot;https://github.com/actions/github-script&quot;&gt;&lt;code&gt;github-script&lt;/code&gt;&lt;/a&gt; action allows you to write inline JavaScript within a GitHub Actions workflow. The string provided to the &lt;code&gt;script&lt;/code&gt; property will be used as the body of an asynchronous function call.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;- uses: actions/github-script@v6
  id: script
  with:
    script: return &amp;quot;Hello!&amp;quot;
    result-encoding: string
- name: Get result
  run: echo &amp;quot;${{steps.script.outputs.result}}&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That example is from the official documentation; you can return an optionally JSON-encoded string and it&amp;#39;ll be available under the &lt;code&gt;result&lt;/code&gt; key of the step&amp;#39;s outputs.&lt;/p&gt;
&lt;p&gt;Some other things you can do:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;require&lt;/code&gt; NPM packages&lt;/li&gt;
&lt;li&gt;Find files with glob patterns via &lt;a href=&quot;https://github.com/actions/toolkit/tree/main/packages/glob&quot;&gt;&lt;code&gt;@actions/glob&lt;/code&gt;&lt;/a&gt; (passed to your script as &lt;code&gt;glob&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Make GitHub API calls via a pre-authenticated &lt;a href=&quot;https://octokit.github.io/rest.js&quot;&gt;&lt;code&gt;octokit/rest.js&lt;/code&gt;&lt;/a&gt; (passed to your script as &lt;code&gt;github&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
</content:encoded>
</item>
<item>
<guid>https://github.com/jakelazaroff/til/blob/main/bash/run-commands-when-a-shell-script-exits.md</guid>
<link>https://github.com/jakelazaroff/til/blob/main/bash/run-commands-when-a-shell-script-exits.md</link>
<title>TIL: Run commands when a shell script exits</title>
<pubDate>Mon, 31 Jul 2023 22:03:25 GMT</pubDate>
<content:encoded>&lt;p&gt;Sometimes it&amp;#39;s useful to run commands when a shell script exits. For example, we might want to hide the cursor while playing a progress animation, and show it again when finished. But what if the user hits &lt;code&gt;ctrl-c&lt;/code&gt; to exit the application? If we don&amp;#39;t explicitly re-enable the cursor, it&amp;#39;ll remain hidden even after the script has exited.&lt;/p&gt;
&lt;p&gt;A bit of searching turned up the &lt;a href=&quot;https://man7.org/linux/man-pages/man1/trap.1p.html&quot;&gt;&lt;code&gt;trap&lt;/code&gt;&lt;/a&gt; command, which runs another command when the program receives a signal from the operating system.&lt;/p&gt;
&lt;p&gt;The syntax is &lt;code&gt;trap [action condition...]&lt;/code&gt;. Here&amp;#39;s an example of running some cleanup code when the program receives &lt;code&gt;SIGINT&lt;/code&gt; (which is triggered by &lt;code&gt;ctrl-c&lt;/code&gt;) or &lt;code&gt;SIGTERM&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;cleanup () {
    # commands go here
    exit
}

trap cleanup INT TERM
&lt;/code&gt;&lt;/pre&gt;
</content:encoded>
</item>
</channel>
</rss>